generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  NINE_HUNDRED_GRAMS
  FOUR_HUNDRED_FIFTY_GRAMS
  TWO_HUNDRED_FIFTY_GRAMS
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
  distributor
}

enum BlogCategory {
  moda
  estilo_de_vida
  viajes
  comida
  tecnologia
  salud
  fitness
  belleza
  entretenimiento
  educacion
  deportes
  arte
  musica
  ciencia
  negocios
  fotografia
  literatura
  historia
  naturaleza
  cine
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  Blog Blog[]

  address UserAddress?
  Order   Order[]

  Branch Branch[]
}

model Country {
  id   String @id @unique
  name String

  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String
  postalCode String
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String
  postalCode String
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  image     String
  category  BlogCategory[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
}

model Branch {
  id      String @id @default(uuid())
  name    String
  address String
  phone   String
  email   String
  lat     Float
  lng     Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}
